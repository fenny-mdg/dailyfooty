{
  "version": 3,
  "sources": ["../server/index.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nimport { createRequestHandler, type RequestHandler } from \"@remix-run/express\";\nimport {\n  broadcastDevReady,\n  installGlobals,\n  type ServerBuild,\n} from \"@remix-run/node\";\nimport { ip as ipAddress } from \"address\";\nimport chalk from \"chalk\";\nimport closeWithGrace from \"close-with-grace\";\nimport compression from \"compression\";\nimport express from \"express\";\nimport rateLimit from \"express-rate-limit\";\nimport getPort, { portNumbers } from \"get-port\";\nimport helmet from \"helmet\";\nimport morgan from \"morgan\";\n\ninstallGlobals();\n\nconst MODE = process.env.NODE_ENV;\nconst BUILD_PATH = \"../build/index.js\";\nconst WATCH_PATH = \"../build/version.txt\";\n\n/**\n * Initial build\n * @type {ServerBuild}\n */\nconst build = await import(BUILD_PATH);\nlet devBuild = build;\n\nconst app = express();\n\nconst getHost = (req: { get: (key: string) => string | undefined }) =>\n  req.get(\"X-Forwarded-Host\") ?? req.get(\"host\") ?? \"\";\n\n// fly is our proxy\napp.set(\"trust proxy\", true);\n\n// ensure HTTPS only (X-Forwarded-Proto comes from Fly)\napp.use((req, res, next) => {\n  const proto = req.get(\"X-Forwarded-Proto\");\n  const host = getHost(req);\n  if (proto === \"http\") {\n    res.set(\"X-Forwarded-Proto\", \"https\");\n    res.redirect(`https://${host}${req.originalUrl}`);\n    return;\n  }\n  next();\n});\n\n// no ending slashes for SEO reasons\n// https://github.com/epicweb-dev/epic-stack/discussions/108\napp.use((req, res, next) => {\n  if (req.path.endsWith(\"/\") && req.path.length > 1) {\n    const query = req.url.slice(req.path.length);\n    const safepath = req.path.slice(0, -1).replace(/\\/+/g, \"/\");\n    res.redirect(301, safepath + query);\n  } else {\n    next();\n  }\n});\n\napp.use(compression());\n\n// http://expressjs.com/en/advanced/best-practice-security.html#at-a-minimum-disable-x-powered-by-header\napp.disable(\"x-powered-by\");\n\n// Remix fingerprints its assets so we can cache forever.\napp.use(\n  \"/build\",\n  express.static(\"public/build\", { immutable: true, maxAge: \"1y\" }),\n);\n\n// Aggressively cache fonts for a year\napp.use(\n  \"/fonts\",\n  express.static(\"public/fonts\", { immutable: true, maxAge: \"1y\" }),\n);\n\n// Everything else (like favicon.ico) is cached for an hour. You may want to be\n// more aggressive with this caching.\napp.use(express.static(\"public\", { maxAge: \"1h\" }));\n\napp.get([\"/build/*\", \"/img/*\", \"/fonts/*\", \"/favicons/*\"], (req, res) => {\n  // if we made it past the express.static for these, then we're missing something.\n  // So we'll just send a 404 and won't bother calling other middleware.\n  return res.status(404).send(\"Not found\");\n});\n\nmorgan.token(\"url\", (req) => decodeURIComponent(req.url ?? \"\"));\napp.use(\n  morgan(\"tiny\", {\n    skip: (req, res) =>\n      res.statusCode === 200 &&\n      (req.url?.startsWith(\"/resources/note-images\") ||\n        req.url?.startsWith(\"/resources/user-images\") ||\n        req.url?.startsWith(\"/resources/healthcheck\")),\n  }),\n);\n\napp.use((_, res, next) => {\n  res.locals.cspNonce = crypto.randomBytes(16).toString(\"hex\");\n  next();\n});\n\napp.use(\n  helmet({\n    referrerPolicy: { policy: \"same-origin\" },\n    crossOriginEmbedderPolicy: false,\n    contentSecurityPolicy: {\n      // NOTE: Remove reportOnly when you're ready to enforce this CSP\n      reportOnly: true,\n      directives: {\n        // @ts-expect-error Type mismatch\n        \"connect-src\": [MODE === \"development\" ? \"ws:\" : null, \"'self'\"].filter(\n          Boolean,\n        ),\n        \"font-src\": [\"'self'\"],\n        \"frame-src\": [\"'self'\"],\n        \"img-src\": [\"'self'\", \"data:\"],\n        \"script-src\": [\n          \"'strict-dynamic'\",\n          \"'self'\",\n          // @ts-expect-error Type error on res.locals\n          (_, res) => `'nonce-${res.locals.cspNonce}'`,\n        ],\n        \"script-src-attr\": [\n          // @ts-expect-error Type error on res.locals\n          (_, res) => `'nonce-${res.locals.cspNonce}'`,\n        ],\n        \"upgrade-insecure-requests\": null,\n      },\n    },\n  }),\n);\n\n// When running tests or running in development, we want to effectively disable\n// rate limiting because playwright tests are very fast and we don't want to\n// have to wait for the rate limit to reset between tests.\nconst maxMultiple =\n  MODE !== \"production\" || process.env.PLAYWRIGHT_TEST_BASE_URL ? 10_000 : 1;\nconst rateLimitDefault = {\n  windowMs: 60 * 1000,\n  max: 1000 * maxMultiple,\n  standardHeaders: true,\n  legacyHeaders: false,\n};\n\nconst strongestRateLimit = rateLimit({\n  ...rateLimitDefault,\n  windowMs: 60 * 1000,\n  max: 10 * maxMultiple,\n});\n\nconst strongRateLimit = rateLimit({\n  ...rateLimitDefault,\n  windowMs: 60 * 1000,\n  max: 100 * maxMultiple,\n});\n\nconst generalRateLimit = rateLimit(rateLimitDefault);\napp.use((req, res, next) => {\n  const strongPaths = [\n    \"/login\",\n    \"/signup\",\n    \"/verify\",\n    \"/admin\",\n    \"/onboarding\",\n    \"/reset-password\",\n    \"/settings/profile\",\n    \"/resources/login\",\n    \"/resources/verify\",\n  ];\n  if (req.method !== \"GET\" && req.method !== \"HEAD\") {\n    if (strongPaths.some((p) => req.path.includes(p))) {\n      return strongestRateLimit(req, res, next);\n    }\n    return strongRateLimit(req, res, next);\n  }\n\n  // the verify route is a special case because it's a GET route that\n  // can have a token in the query string\n  if (req.path.includes(\"/verify\")) {\n    return strongestRateLimit(req, res, next);\n  }\n\n  return generalRateLimit(req, res, next);\n});\n\nfunction getRequestHandler(build: ServerBuild): RequestHandler {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function getLoadContext(_: any, res: any) {\n    return { cspNonce: res.locals.cspNonce };\n  }\n  return createRequestHandler({ build, mode: MODE, getLoadContext });\n}\n\napp.all(\n  \"*\",\n  MODE === \"development\"\n    ? (...args) => getRequestHandler(devBuild)(...args)\n    : getRequestHandler(build),\n);\n\nconst desiredPort = Number(process.env.PORT || 3000);\nconst portToUse = await getPort({\n  port: portNumbers(desiredPort, desiredPort + 100),\n});\n\nconst server = app.listen(portToUse, () => {\n  const addy = server.address();\n  const portUsed =\n    desiredPort === portToUse\n      ? desiredPort\n      : addy && typeof addy === \"object\"\n        ? addy.port\n        : 0;\n\n  if (portUsed !== desiredPort) {\n    console.warn(\n      chalk.yellow(\n        `\u26A0\uFE0F  Port ${desiredPort} is not available, using ${portUsed} instead.`,\n      ),\n    );\n  }\n  console.log(`\uD83D\uDE80  We have liftoff!`);\n  const localUrl = `http://localhost:${portUsed}`;\n  let lanUrl: string | null = null;\n  const localIp = ipAddress() ?? \"Unknown\";\n  // Check if the address is a private ip\n  // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n  // https://github.com/facebook/create-react-app/blob/d960b9e38c062584ff6cfb1a70e1512509a966e7/packages/react-dev-utils/WebpackDevServerUtils.js#LL48C9-L54C10\n  if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(localIp)) {\n    lanUrl = `http://${localIp}:${portUsed}`;\n  }\n\n  console.log(\n    `\n${chalk.bold(\"Local:\")}            ${chalk.cyan(localUrl)}\n${lanUrl ? `${chalk.bold(\"On Your Network:\")}  ${chalk.cyan(lanUrl)}` : \"\"}\n${chalk.bold(\"Press Ctrl+C to stop\")}\n\t\t`.trim(),\n  );\n\n  if (MODE === \"development\") {\n    broadcastDevReady(build);\n  }\n});\n\ncloseWithGrace(async () => {\n  await new Promise((resolve, reject) => {\n    server.close((e) => (e ? reject(e) : resolve(\"ok\")));\n  });\n});\n\nasync function reloadBuild() {\n  devBuild = await import(`${BUILD_PATH}?update=${Date.now()}`);\n  broadcastDevReady(devBuild);\n}\n// during dev, we'll keep the build module up to date with the changes\nif (MODE === \"development\") {\n  // We'll import chokidar here so doesn't get bundled in production.\n  const chokidar = await import(\"chokidar\");\n\n  const dirname = path.dirname(fileURLToPath(import.meta.url));\n  const watchPath = path.join(dirname, WATCH_PATH).replace(/\\\\/g, \"/\");\n\n  const buildWatcher = chokidar\n    .watch(watchPath, { ignoreInitial: true })\n    .on(\"add\", reloadBuild)\n    .on(\"change\", reloadBuild);\n\n  closeWithGrace(() => buildWatcher.close());\n}\n"],
  "mappings": "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",
  "names": ["build"]
}
